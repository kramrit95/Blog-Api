package com.codewithamrit.blog.services.impl;

import java.awt.print.Pageable;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.codewithamrit.blog.exceptions.ResourceNotFoundException;
import com.codewithamrit.blog.model.Category;
import com.codewithamrit.blog.model.Post;
import com.codewithamrit.blog.model.User;
import com.codewithamrit.blog.payloads.PostDto;
import com.codewithamrit.blog.repositories.CategoryRepo;
import com.codewithamrit.blog.repositories.PostRepo;
import com.codewithamrit.blog.repositories.UserRepo;
import com.codewithamrit.blog.services.PostService;

@Service
public class PostServiceImpl implements PostService {
	@Autowired
	private PostRepo postRepo;
	@Autowired
	private ModelMapper modelMapper;
	@Autowired
	private UserRepo userRepo;
	@Autowired
	private CategoryRepo categoryRepo;

	@Override
	public PostDto createPost(PostDto postDto, Integer userId, Integer categoryId) {
		User user = this.userRepo.findById(userId)
				.orElseThrow(() -> new ResourceNotFoundException("User", "user Id", userId));
		Category category = this.categoryRepo.findById(categoryId)
				.orElseThrow(() -> new ResourceNotFoundException("Category", "category id", categoryId));

		Post post = this.modelMapper.map(postDto, Post.class);
		post.setImageName("deafult.png");
		post.setAddedDate(new Date());
		post.setCategory(category);
		post.setUser(user);
       Post newPost=this.postRepo.save(post);
		return this.modelMapper.map(newPost,PostDto.class);
				}

	@Override
	public PostDto updatePost(PostDto postDto, Integer 	postId) {
		
		
		Post post=this.postRepo.findById(postId).orElseThrow(()-> new ResourceNotFoundException("Post", "post Id", postId));
	post.setTitle(postDto.getTitle());
	post.setContent(postDto.getContent());
	post.setImageName(postDto.getImageName());
	Post updatePost=this.postRepo.save(post);
	return this.modelMapper.map(updatePost, PostDto.class);
	
	
	
	
	}
	

	@Override
	public PostDto getPostById(Integer postId) {
		Post post=this.postRepo.findById(postId).orElseThrow(()-> new ResourceNotFoundException("Post", "post Id", postId));
		return this.modelMapper.map(post, PostDto.class);
	}

	@Override
	public List<PostDto> getAllposts() {
		int pageSize=5;
		int pageNumber=1;
		
		Pageable p=PageRequest.of(pageSize, pageNumber);
		
	        Page<Post> pagePost=this.postRepo.findAll(p);
	        List<Post> allPosts=pagePost.getContent();
	        
	 List<PostDto> postDtos=allPosts.stream().map((post)->this.modelMapper.map(post, PostDto.class)).collect(Collectors.toList());
		return  postDtos;
	}

	@Override
	public void deletePost(Integer postId) {
		Post post=this.postRepo.findById(postId).orElseThrow(()-> 
		new ResourceNotFoundException("Post", "post Id", postId));
      this.postRepo.delete(post);
	}

	@Override
	public List<PostDto> getPostsByCategory(Integer categoryId) {
		Category cat=this.categoryRepo.findById(categoryId).orElseThrow(
				()->new ResourceNotFoundException("Category","category id" , categoryId));
	List<Post> posts=this.postRepo.findByCategory(cat);
	List<PostDto> postDtos=posts.stream().map((post)->this.modelMapper.map(post,PostDto.class)).collect(Collectors.toList());
		return postDtos;
	}

	@Override
	public List<PostDto> getPostsByUser(Integer userId) {
		User user=this.userRepo.findById(userId).orElseThrow(
				()->new ResourceNotFoundException("User","user id" , userId));
	List<Post> posts=this.postRepo.findByUser(user);
	List<PostDto> postDtos=posts.stream().map((post)->this.modelMapper.map(post,PostDto.class)).collect(Collectors.toList());
		return postDtos;
	}

	@Override
	public List<PostDto> serchPosts(String keyword) {
		// TODO Auto-generated method stub
		return null;
	}

}
